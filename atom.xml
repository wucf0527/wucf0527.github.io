<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wcf</title>
  <icon>https://www.gravatar.com/avatar/b70bb76631c43c98ad1cb7bd1daf1b74</icon>
  <subtitle>无</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-23T11:41:18.589Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wucf</name>
    <email>wcfinyourheart@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReentrantLock和AQS详解</title>
    <link href="http://example.com/2022/05/18/ReentrantLock%E5%92%8CAQS%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/05/18/ReentrantLock%E5%92%8CAQS%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-05-18T15:05:29.000Z</published>
    <updated>2022-05-23T11:41:18.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>本质指的AbstractQueuedSynchronizer类</p><p>类中有几个关键属性加上 clh双向队列组成</p><h3 id="源码详解"><a href="#源码详解" class="headerlink" title="源码详解"></a>源码详解</h3><h3 id="aqs中的内部类-node节点和队列"><a href="#aqs中的内部类-node节点和队列" class="headerlink" title="aqs中的内部类 node节点和队列"></a>aqs中的内部类 node节点和队列</h3><p>node就是aqs内部队列里面的每个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">      <span class="comment">//作为共享模式（可重入）</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line"><span class="comment">//排他锁的表示 （独占锁）</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//标识失效</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//后续节点需要唤醒</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//等待状态：表示线程正在等待条件</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//等待状态：表示下一个共享模式的节点应该无条件的传播下去</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line"><span class="comment">//    //等待状态，初始化为0，剩下的状态就是上面列出的</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//队列上一个节点，也叫前驱节点</span></span><br><span class="line">      <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//队列下一个节点，也叫后续节点</span></span><br><span class="line">      <span class="keyword">volatile</span> Node next;</span><br><span class="line">  <span class="comment">//当前节点的线程</span></span><br><span class="line">      <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Link to next node waiting on condition, or the special</span></span><br><span class="line"><span class="comment">       * value SHARED.  Because condition queues are accessed only</span></span><br><span class="line"><span class="comment">       * when holding in exclusive mode, we just need a simple</span></span><br><span class="line"><span class="comment">       * linked queue to hold nodes while they are waiting on</span></span><br><span class="line"><span class="comment">       * conditions. They are then transferred to the queue to</span></span><br><span class="line"><span class="comment">       * re-acquire. And because conditions can only be exclusive,</span></span><br><span class="line"><span class="comment">       * we save a field by using special value to indicate shared</span></span><br><span class="line"><span class="comment">       * mode.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      Node nextWaiter;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//是否是共享节点</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="type">return</span> <span class="variable">nextWaiter</span> <span class="operator">=</span>= SHARED;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="comment">//返回前驱节点。 如果前驱节点为null抛出异常</span></span><br><span class="line">      <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">          <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">          <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">          <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">          <span class="built_in">this</span>.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">          <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">          <span class="built_in">this</span>.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="aqs类中"><a href="#aqs类中" class="headerlink" title="aqs类中"></a>aqs类中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">//表示头节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tail of the wait queue, lazily initialized.  Modified only via</span></span><br><span class="line"><span class="comment">     * method enq to add new wait node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//表示尾部节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The synchronization state.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br></pre></td></tr></table></figure><p>aqs中的head 和tail 指向 头尾节点，队列里面的所有节点的 prve 和next 指向上一节点和下一节点。</p><p>aqs中的队列大概是这么一个结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      +------+  prev +-----+       +-----+</span></span><br><span class="line"><span class="comment"> head |      | &lt;---- |     | &lt;---- |     |  tail</span></span><br><span class="line"><span class="comment">      +------+       +-----+       +-----+</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">源码中有这样一个图</span><br></pre></td></tr></table></figure><h3 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h3><p>ReentrantLock中的公平锁运行及源码解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">    ReentrantLock.lock 里面调用了这个方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"><span class="comment">//tryAcquire(arg)成功后 返回true ！的作用返回false</span></span><br><span class="line"><span class="comment">//尝试加锁失败后 acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        <span class="comment">//解析在下面</span></span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">  <span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();‘</span><br><span class="line">              <span class="comment">//获取锁的状态 0代表没人使用，大于零代表有线程使用，和可重入</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// 当锁没人使用的时候，首先判断自己是否需要排队，如果不需要排队，cas修改锁的状态并且 setExclusiveOwnerThread(current);</span></span><br><span class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">  <span class="comment">//可重入锁的体现</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">      <span class="comment">//首先new一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                pred.next = node;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列和插入节点</span></span><br><span class="line"> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">              <span class="comment">//判断头尾是否一样</span></span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">          <span class="comment">//获取下个节点 复制给node p</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">          <span class="comment">//如果下个节点为空 抛出异常，如果下个节点不为空返回该节点</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="ReentrantLock加锁过程源码分析"><a href="#ReentrantLock加锁过程源码分析" class="headerlink" title="ReentrantLock加锁过程源码分析"></a>ReentrantLock加锁过程源码分析</h1><p>加锁流程图</p><p><img src="/..%5CReentarntLock%E5%8A%A0%E9%94%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="微信图片_20220521190422"></p><h2 id="入队流程即源码解析"><a href="#入队流程即源码解析" class="headerlink" title="入队流程即源码解析"></a>入队流程即源码解析</h2><h4 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h4><p><img src="https://img-blog.csdnimg.cn/20190809165359537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFfbHl2ZWU=,size_16,color_FFFFFF,t_70" alt="队列流程示意图"></p><h3 id="贯通全局的例子"><a href="#贯通全局的例子" class="headerlink" title="贯通全局的例子"></a>贯通全局的例子</h3><p>假设有三个并发的线程</p><p>T1</p><p>T2</p><p>T3</p><p>这三个线程出现了资源争抢</p><p>t1最先执行其次t2 t3</p><p>t1做的操作： 判断锁是否再用（否）  判断自己是否需要排队（否） cas修改锁的状态</p><p>t2：</p><ol><li>判断锁是否再用（是）</li><li>判断自己是否需要排队（是）</li><li>判断队列是否为空（是）</li><li>创建一个Thread属性为自己的node 和一个空node 把队列的头指向空node，队列的尾部指向创建一个Thread属性为自己的node</li></ol><p>t3： </p><ol><li>判断锁是否再用（是）</li><li>判断自己是否需要排队（是）</li><li>判断队列是否为空（否）</li><li>把自己的上一个节点指向当前队列的尾部（对于当前例子来说就是t2），cas修改队列的尾部为t3，修改t2的下一个节点为t3</li><li>再后来的节点都是同t3</li></ol><p>入队流程结束</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">  <span class="comment">//t1 加锁成功</span></span><br><span class="line">      <span class="comment">//t2  tryAcquire(arg)加锁失败</span></span><br><span class="line">   <span class="comment">//t3  tryAcquire(arg)加锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">             <span class="comment">//t2  addWaiter</span></span><br><span class="line">   <span class="comment">//t3  addWaiter</span></span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//t1 hasQueuedPredecessors（不需要排队）-》compareAndSetState</span></span><br><span class="line">              <span class="comment">//t2  hasQueuedPredecessors false 不往下执行</span></span><br><span class="line">   <span class="comment">//t3  hasQueuedPredecessors  false 不往下执行</span></span><br><span class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最下层的，判断自己是否需要排队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedPredecessors</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取头尾节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        Node s;</span><br><span class="line">      <span class="comment">//头尾节点是否相等，!的作用下不相等为false 代表需要排队 需要排队直接进入加锁失败</span></span><br><span class="line">        <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">          </span><br><span class="line">            ((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">      <span class="comment">//创建一个node节点，线程为当前线程 t2 t3</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">// t2 由于队列还没初始化，tail为空 所以执行neq（）</span></span><br><span class="line">      <span class="comment">//t3 的时候tail为t2 不等于空</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">      <span class="comment">//t3 把自己的上一个节点指向当前队列的尾部（对于当前例子来说就是t2），cas修改队列的尾部为t3，修改t2的下一个节点为t3</span></span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                pred.next = node;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//t2执行</span></span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//t2执行</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">      <span class="comment">//死循环</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="comment">//第一次循环 tail为null t为null</span></span><br><span class="line">          <span class="comment">//第二次循环 tail 为空node 不等于null 进入else</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span>  tail;</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; </span><br><span class="line">              <span class="comment">//第一次循环 new一个空node cas 设置为队列的头部</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                  <span class="comment">//第一次循环 设置尾部为空node</span></span><br><span class="line">                  <span class="comment">//第一次循环结束</span></span><br><span class="line">                    tail = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//第二次循环 设置当前node的上一个节点为t</span></span><br><span class="line">                node.prev = t;</span><br><span class="line">               <span class="comment">//第二次循环 cas修改当前节点为队列尾部</span></span><br><span class="line">              <span class="comment">// t2入队操作结束</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                    t.next = node;</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="入队的一些补充"><a href="#入队的一些补充" class="headerlink" title="入队的一些补充"></a>入队的一些补充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedPredecessors</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">        <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">        <span class="comment">// thread is first in queue.</span></span><br><span class="line">        <span class="comment">//判断队列中是否有优先级更高的等待线程</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        Node s;</span><br><span class="line">        <span class="comment">//这里如果返回false 才会去CAS抢锁,否则就去排队</span></span><br><span class="line">        <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">            ((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> h != t &amp;&amp;((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">这一行代码对于并发编程来说 有很多可解析的地方</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先 h！&#x3D;t的情况</p><blockquote><p>h !&#x3D; t有哪些情况?</p><ul><li>情况1: head为null, tail不为null</li><li>情况2: head不为null, tail为null</li><li>情况3: head和tail都不为null且不相等</li></ul></blockquote><p>1 不可能出现， </p><p>情况2: 这时其他线程进入enq方法刚执行完compareAndSetHead(new Node()),但是还没有给tail赋值 此时(s&#x3D; h.next) &#x3D;&#x3D; null 为 true,直接退出循环,此时说明有优先级更高的线程在执行任务<br>情况3: 队列已经初始化成功, 此时(s&#x3D; h.next) &#x3D;&#x3D; null 为 false, 然后判断当前节点是不是head节点的下一个节点,请注意之前已经给s &#x3D; h.next赋值了,如果 s.thread !&#x3D; Thread.currentThread()说明当前节点也不是第二个节点,那么就退出循环,乖乖排队去（网上收录）</p><p>在并发编程中，这些情况很难复现，反复debug也很难出现这种特殊情况，只能脑中模拟，尝试理解。</p><p>参考链接：<a href="https://blog.csdn.net/java_lyvee/article/details/98966684">https://blog.csdn.net/java_lyvee/article/details/98966684</a></p><h2 id="park部分"><a href="#park部分" class="headerlink" title="park部分"></a>park部分</h2><p>按照我们的平时的想法，加锁失败并成功进入等待队列后，应该要把线程阻塞，而大神们却不是这么想的。</p><p>依旧是上面的三个线程例子做基础</p><p>t1已经成功加锁后续也就没有t1的事情了</p><p>t2:    </p><ol><li><p>获取队列中上一个节点 判断是不是头部节点  </p><ol start="2"><li>上一个节点是头部节点，自旋一次 tryAcquire尝试获取锁 （成功则 把node节点 上一个节点和thread属性设置为null 把自己设置为头部节点）</li><li>自旋一次失败  判断上一个节点的wait state 是否为-1  （例子的情况肯定不是）</li><li>修改上一个节点的waitstate为-1 再次自旋一次尝试获取锁 （假设失败）</li><li>自旋失败后 回到第三步 这时候已经为-1了  LockSupport.park(this); 线程park</li></ol></li></ol><p>t3： </p><ol><li>获取队列中上一个节点 判断是不是头部节点  </li><li>不是头部节点，判断上一个节点的wait state 是否为-1  </li><li>修改上一个节点的waitstate为-1 自旋一次判断上一个是否头部节点 否</li><li>判断上一个节点的wait state 是否为-1   否 线程pake</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//入队执行addWaiter(Node.EXCLUSIVE) 已经执行完了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">//死循环</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="comment">//获取 上一个节点</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">              <span class="comment">//判断上一个节点是不是头部节点</span></span><br><span class="line">              <span class="comment">//t2 是，tryAcquire 自旋获取锁；</span></span><br><span class="line">              <span class="comment">//t3 否，走下一步shouldParkAfterFailedAcquire</span></span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                  <span class="comment">//如果t2 自旋获取锁成功，</span></span><br><span class="line">                  <span class="comment">//则进行下面的操作 修改自己为头节点</span></span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//t2,t3一样的操作 </span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> &#123;</span><br><span class="line">  <span class="comment">// 获取上一个节点的waitStatus</span></span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> pred.waitStatus;</span><br><span class="line">  <span class="comment">// 判断是否等于-1 </span></span><br><span class="line">  <span class="comment">// 第二次循环后已经为-1了 返回true 执行 parkAndCheckInterrupt()</span></span><br><span class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">             * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class="line"><span class="comment">             * indicate retry.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                node.prev = pred = pred.prev;</span><br><span class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">            pred.next = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">             * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">             * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">          <span class="comment">//不等于-1 修改上一个节点的waitstate为-1 返回false 再次循环</span></span><br><span class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">parkAndCheckInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 里面调用了 unsafe.park 使当前线程park住。</span></span><br><span class="line">        LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AQS&quot;&gt;&lt;a href=&quot;#AQS&quot; class=&quot;headerlink&quot; title=&quot;AQS&quot;&gt;&lt;/a&gt;AQS&lt;/h2&gt;&lt;p&gt;本质指的AbstractQueuedSynchronizer类&lt;/p&gt;
&lt;p&gt;类中有几个关键属性加上 clh双向队列组成&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReentrantReadWriteLock</title>
    <link href="http://example.com/2022/05/17/ReentrantReadWriteLock/"/>
    <id>http://example.com/2022/05/17/ReentrantReadWriteLock/</id>
    <published>2022-05-17T11:36:43.000Z</published>
    <updated>2022-05-17T11:59:11.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h1><p>ReentrantReadWriteLock是读写锁，适用场景为读多写少的场景，当读锁被获取的时候不允许获取写锁。一个线程可以同时获取读写锁，但是要先获取写锁再获取读锁，不然就会死锁</p><h4 id="别人的总结"><a href="#别人的总结" class="headerlink" title="别人的总结"></a>别人的总结</h4><p>ReentrantReadWriteLock 是读写锁，和ReentrantLock会有所不同，对于读多写少的场景使用ReentrantReadWriteLock 性能会比ReentrantLock高出不少。在多线程读时互不影响，不像ReentrantLock即使是多线程读也需要每个线程获取锁。不过任何一个线程在写的时候就和ReentrantLock类似，其他线程无论读还是写都必须获取锁。需要注意的是同一个线程可以拥有 writeLock 与 readLock (但必须先获取 writeLock 再获取 readLock, 反过来进行获取会导致死锁)</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个map 使用读写锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; map =     <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantReadWriteLock lock=<span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String  <span class="title function_">get</span> <span class="params">(String key)</span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getAllKeys</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>     map.keySet();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">put</span><span class="params">(String key,String value)</span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用map做一个小例子简单理解</p><p>如果实际中读操作远远大于写操作，那么使用ReentrantReadWriteLock就是不合适的，有可能会因为一直在读，写的操作一直无法执行，所以应该在读少写多的时候使用该锁</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>ReentrantReadWriteLock适合读少写多的场景</li><li>ReentrantReadWriteLock使用了读写分离的策略，读操作直接互不影响，有读锁的时候不允许获得写锁。</li><li>ReentrantLock是独占锁，ReentrantReadWriteLock允许多个线程同时获取读锁。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ReentrantReadWriteLock&quot;&gt;&lt;a href=&quot;#ReentrantReadWriteLock&quot; class=&quot;headerlink&quot; title=&quot;ReentrantReadWriteLock&quot;&gt;&lt;/a&gt;ReentrantReadWriteLo</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ReentrantLock预习</title>
    <link href="http://example.com/2022/05/16/ReentrantLock%E9%A2%84%E4%B9%A0/"/>
    <id>http://example.com/2022/05/16/ReentrantLock%E9%A2%84%E4%B9%A0/</id>
    <published>2022-05-16T15:10:40.000Z</published>
    <updated>2022-05-16T15:34:54.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReentrantLock和Synchronized"><a href="#ReentrantLock和Synchronized" class="headerlink" title="ReentrantLock和Synchronized"></a>ReentrantLock和Synchronized</h2><table><thead><tr><th></th><th>ReentrantLock</th><th>Synchronized</th></tr></thead><tbody><tr><td>锁机制实现</td><td>依赖AQS</td><td>监视器模式</td></tr><tr><td>灵活性</td><td>支持响应中断，超时，尝试获得锁</td><td>不灵活</td></tr><tr><td>释放形式</td><td>手动调用unlock</td><td>监视器自动释放</td></tr><tr><td>锁类型</td><td>公平锁和非公平锁</td><td>非公平锁</td></tr><tr><td>条件队列</td><td>可关联多个队列</td><td>关联一个队列</td></tr><tr><td>可重入性</td><td>可重入</td><td>可重入</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **************************Synchronized的使用方式**************************</span></span><br><span class="line"><span class="comment">// 1.用于代码块</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 2.用于对象</span></span><br><span class="line"><span class="keyword">synchronized</span> (object) &#123;&#125;</span><br><span class="line"><span class="comment">// 3.用于方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span> <span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 4.可重入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// **************************ReentrantLock的使用方式**************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span> <span class="params">()</span> <span class="keyword">throw</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1.初始化选择公平锁、非公平锁</span></span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 2.可用于代码块</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.支持多种加锁方式，比较灵活; 具有可重入特性</span></span><br><span class="line">            <span class="keyword">if</span>(lock.tryLock(<span class="number">100</span>, TimeUnit.MILLISECONDS))&#123; &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.手动释放锁</span></span><br><span class="line">            lock.unlock()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章<a href="https://blog.csdn.net/zhengzhaoyang122/article/details/110847701">https://blog.csdn.net/zhengzhaoyang122/article/details/110847701</a></p><p>简单计数使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> clientTotal=<span class="number">5000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> ThteadTotal=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Lock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">final</span> Semaphore semaphore=<span class="keyword">new</span> <span class="title class_">Semaphore</span>(ThteadTotal);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch=<span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(clientTotal);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=clientTotal;i++)&#123;</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                <span class="comment">//争抢方法</span></span><br><span class="line">                add();</span><br><span class="line">                <span class="comment">//释放</span></span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    log.info(count+<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">//很简单的使用方式</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    count++;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞等待获取锁;不允许Thread.interrupt中断,即使检测到Thread.isInterrupted,一样会继续尝试      * 获取锁，失败则继续休眠。只是在最后获取锁成功后再把当前线程置为interrupted状态,然后再中断线程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前线程未被中断，则获取锁</span></span><br><span class="line"><span class="comment">     * 允许在等待时由其它线程调用等待线程的Thread.interrupt方法来中断等待线程的等待而直接返回，这时      * 不用获取锁，而会抛出一个InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *尝试申请一个锁，在成功获得锁后返回true，否则，立即返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在一段时间内尝试申请一个锁，在成功获得锁后返回true，否则，立即返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">            <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程持有此锁的次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHoldCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否被当前线程持有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHeldByCurrentThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询此锁是否由任意线程持有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *如果是“公平锁”返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isFair</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync <span class="keyword">instanceof</span> FairSync;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Thread <span class="title function_">getOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getOwner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询是否有线程正在等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedThreads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *查询给定线程是否正在等待获取此锁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedThread</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isQueued(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取正等待获取此锁的线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getQueueLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getQueueLength();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正等待获取此锁的线程集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title function_">getQueuedThreads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *是否存在正在等待并符合相关给定条件的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasWaiters</span><span class="params">(Condition condition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正在等待并符合相关给定条件的线程数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWaitQueueLength</span><span class="params">(Condition condition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正在等待并符合相关给定条件的线程集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title function_">getWaitingThreads</span><span class="params">(Condition condition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>小预习 明天深入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ReentrantLock和Synchronized&quot;&gt;&lt;a href=&quot;#ReentrantLock和Synchronized&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock和Synchronized&quot;&gt;&lt;/a&gt;Reentran</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AQS.cyclicBarrier</title>
    <link href="http://example.com/2022/05/14/AQS-cyclicBarrier/"/>
    <id>http://example.com/2022/05/14/AQS-cyclicBarrier/</id>
    <published>2022-05-14T10:21:15.000Z</published>
    <updated>2022-05-15T11:18:37.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicBarrier 理解为循环围栏，可以做是一个可重置的定时器，提供了reset方法，与countdownLacth不同。</p><p>作用是 <strong>让一组线程达到一个同步点的时候被阻塞，直到最后一个线程达到同步点再继续执行接下来的操作</strong>。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//有parties个线程调用了 CyclicBarrier的await方法 才继续执行线程后续操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(parties, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//有parties个线程调用了 CyclicBarrier的await方法 首先执行barrierAction 然后执行被同步的线程后续操作</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties, Runnable barrierAction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="built_in">this</span>.parties = parties;</span><br><span class="line">        <span class="built_in">this</span>.count = parties;</span><br><span class="line">        <span class="built_in">this</span>.barrierCommand = barrierAction;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="关键方法和使用例子"><a href="#关键方法和使用例子" class="headerlink" title="关键方法和使用例子"></a>关键方法和使用例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dowait(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(toe); <span class="comment">// cannot happen</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置超时时间  超过时间会抛出异常，如果想要不影响程序运行 可以捕获</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException,</span><br><span class="line">               BrokenBarrierException,</span><br><span class="line">               TimeoutException &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="literal">true</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重置计数器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            breakBarrier();   <span class="comment">// break the current generation</span></span><br><span class="line">            nextGeneration(); <span class="comment">// start a new generation</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> CyclicBarrier cyclicBarrier=<span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> CyclicBarrier cyclicBarrier2=<span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>,()-&gt;&#123;</span><br><span class="line">    log.info(<span class="string">&quot;满足条件首先调用 &#123;&#125;&quot;</span>,<span class="string">&quot;cyclicBarrier2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">final</span>  <span class="type">int</span> threadNum=i;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                test(threadNum);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               log.info(<span class="string">&quot;Exception &#123;&#125;&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//await 不传入参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> threadNum)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.info(<span class="string">&quot;Thread &#123;&#125; ready&quot;</span>,threadNum);</span><br><span class="line">    cyclicBarrier2.await();</span><br><span class="line">    log.info(<span class="string">&quot;Thread &#123;&#125; continue&quot;</span>,threadNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//await 传入超时时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> threadNum)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.info(<span class="string">&quot;Thread &#123;&#125; ready&quot;</span>,threadNum);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cyclicBarrier.await(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (BrokenBarrierException|TimeoutException e)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;BarrierException  &#123;&#125;&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;Thread &#123;&#125; continue&quot;</span>,threadNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>简单放一个 运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">03.048</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">0</span> ready</span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">04.046</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">1</span> ready</span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">05.059</span> [pool-<span class="number">1</span>-thread-<span class="number">3</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">2</span> ready</span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">06.066</span> [pool-<span class="number">1</span>-thread-<span class="number">4</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">3</span> ready</span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.075</span> [pool-<span class="number">1</span>-thread-<span class="number">5</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">4</span> ready</span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.075</span> [pool-<span class="number">1</span>-thread-<span class="number">5</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">4</span> <span class="keyword">continue</span></span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.075</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">1</span> <span class="keyword">continue</span></span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.075</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">0</span> <span class="keyword">continue</span></span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.075</span> [pool-<span class="number">1</span>-thread-<span class="number">3</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">2</span> <span class="keyword">continue</span></span><br><span class="line"><span class="number">18</span>:<span class="number">34</span>:<span class="number">07.076</span> [pool-<span class="number">1</span>-thread-<span class="number">4</span>] INFO com.imooc.concurrency.aqs.CyclicBarrierExample1 - Thread <span class="number">3</span> <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>可以看到，有五个线程 reday的时候 所有被同步的线程才开始继续运行</p><h3 id="CountDownLatch和CyclicBarrier的区别"><a href="#CountDownLatch和CyclicBarrier的区别" class="headerlink" title="CountDownLatch和CyclicBarrier的区别"></a>CountDownLatch和CyclicBarrier的区别</h3><ol><li>CyclicBarrier可以重复使用 通过reset方法重置，countdownLatch只能使用一次</li><li>CyclicBarrier的工作线程完成任务后，在屏障点到达前，会一直等待，也就是会存在多个线程同时等待的情况；而CountDownLatch的主线程会await阻塞在那里，工作线程完成任务后可以一般都会终止。</li><li>CountDownLatch 减计数  CyclicBarrier加计数   CountDownLatch计数为零的时候释放所有调用await的线程，CyclicBarrier到达屏障值的时候释放等待的线程。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CyclicBarrier&quot;&gt;&lt;a href=&quot;#CyclicBarrier&quot; class=&quot;headerlink&quot; title=&quot;CyclicBarrier&quot;&gt;&lt;/a&gt;CyclicBarrier&lt;/h2&gt;&lt;p&gt;CyclicBarrier 理解为循环围栏，可以做是</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AQS.semaphore</title>
    <link href="http://example.com/2022/05/13/AQS-semaphore/"/>
    <id>http://example.com/2022/05/13/AQS-semaphore/</id>
    <published>2022-05-13T10:06:50.000Z</published>
    <updated>2022-05-13T10:25:23.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><h3 id="使用场景和概念"><a href="#使用场景和概念" class="headerlink" title="使用场景和概念"></a>使用场景和概念</h3><p><strong>Semaphore</strong>是用来<strong>控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源</strong>。</p><p>常用在控制数据库链接的获取中，开发中数据库链接一般是有限的。</p><h3 id="构建方法"><a href="#构建方法" class="headerlink" title="构建方法"></a>构建方法</h3><p>参数permits代表同一时间可以有多少个许可可以被获取，当一个线程只获取一个许可的时候 也可以看作同一时间有多少线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">       sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a &#123;<span class="doctag">@code</span> Semaphore&#125; with the given number of</span></span><br><span class="line"><span class="comment">    * permits and the given fairness setting.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> permits the initial number of permits available.</span></span><br><span class="line"><span class="comment">    *        This value may be negative, in which case releases</span></span><br><span class="line"><span class="comment">    *        must occur before any acquires will be granted.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this semaphore will guarantee</span></span><br><span class="line"><span class="comment">    *        first-in first-out granting of permits under contention,</span></span><br><span class="line"><span class="comment">    *        else &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits, <span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">       sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(permits) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p><strong>acquire</strong> 获取许可</p><p>Semaphore提供了acquire 方法来获取一个许可</p><p>通过传入参数控制 获取一个或者多个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> permits)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">     sync.acquireSharedInterruptibly(permits);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>release</strong> 释放许可</p><p>和获取相反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    sync.releaseShared(permits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tryAcquire 尝试获取许可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取一个许可</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.nonfairTryAcquireShared(<span class="number">1</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//尝试获取一个许可 设置超时时间  如5秒内 如果获取到许可就执行 获取不到就遗弃</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//尝试获取多个许可permits</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">return</span> sync.nonfairTryAcquireShared(permits) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试获取多个许可并设置 超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> permits, <span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="抄来的总结"><a href="#抄来的总结" class="headerlink" title="抄来的总结"></a>抄来的总结</h3><p><code>Semaphore</code>是一个<strong>有效的流量控制工具</strong>，它<strong>基于AQS共享锁实现</strong>。我们常常用它来控制<strong>对有限资源的访问</strong>。</p><ul><li><strong>每次使用资源前，先申请一个或多个信号量，如果资源数不够，就会阻塞等待；</strong></li><li><strong>每次释放资源后，就释放一个或多个信号量</strong>。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Semaphore&quot;&gt;&lt;a href=&quot;#Semaphore&quot; class=&quot;headerlink&quot; title=&quot;Semaphore&quot;&gt;&lt;/a&gt;Semaphore&lt;/h2&gt;&lt;h3 id=&quot;使用场景和概念&quot;&gt;&lt;a href=&quot;#使用场景和概念&quot; class=&quot;he</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AQS.CountDownLatch</title>
    <link href="http://example.com/2022/05/12/AQS-CountDownLatch/"/>
    <id>http://example.com/2022/05/12/AQS-CountDownLatch/</id>
    <published>2022-05-12T11:14:53.000Z</published>
    <updated>2022-05-12T11:32:03.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>简单他是一个计数器，线程安全的计数器</p><p>CountDownLatch提供了两个重要的方法</p><p>countDown（）和 wait（）</p><p>countDown（）的作用是使计数器减一</p><p>try catch finally 这个结果 finally可以保证countDown（）的一定执行</p><p>wait（）主线程会进入等待状态，等计数器归零后唤醒，wait可以传入参数控制等待时间，超过设置的等待时间会直接执行下面的语句。</p><h3 id="举个粒子"><a href="#举个粒子" class="headerlink" title="举个粒子"></a>举个粒子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">int</span> i=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a=<span class="number">0</span>;a&lt;<span class="number">200</span>;a++)&#123;</span><br><span class="line">            <span class="keyword">final</span>  <span class="type">int</span> threadNum=a;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    test(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch的剩余量:&#123;&#125;&quot;</span>,countDownLatch.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;finfish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;count count count,&#123;&#125;&quot;</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果最后三行</span><br><span class="line"><span class="number">19</span>:<span class="number">26</span>:<span class="number">02.535</span> [pool-<span class="number">1</span>-thread-<span class="number">64</span>] INFO com.imooc.concurrency.aqs.CountDownLatchExample - count count count,<span class="number">63</span></span><br><span class="line"><span class="number">19</span>:<span class="number">26</span>:<span class="number">02.536</span> [pool-<span class="number">1</span>-thread-<span class="number">77</span>] INFO com.imooc.concurrency.aqs.CountDownLatchExample - count count count,<span class="number">76</span></span><br><span class="line"><span class="number">19</span>:<span class="number">26</span>:<span class="number">02.550</span> [main] INFO com.imooc.concurrency.aqs.CountDownLatchExample - countDownLatch的剩余量:<span class="number">0</span></span><br><span class="line"><span class="number">19</span>:<span class="number">26</span>:<span class="number">02.551</span> [main] INFO com.imooc.concurrency.aqs.CountDownLatchExample - finfish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在没有超过等待时间的时候  主线程等到countDownLatch归<span class="number">0</span>的时候 才继续执行</span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch的剩余量:&#123;&#125;&quot;</span>,countDownLatch.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;finfish&quot;</span>);</span><br><span class="line">这两行输出语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果我们让test方法超过等待时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">&quot;count count count,&#123;&#125;&quot;</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">19</span>:<span class="number">27</span>:<span class="number">58.962</span> [main] INFO com.imooc.concurrency.aqs.CountDownLatchExample - countDownLatch的剩余量:<span class="number">200</span></span><br><span class="line"><span class="number">19</span>:<span class="number">27</span>:<span class="number">58.966</span> [main] INFO com.imooc.concurrency.aqs.CountDownLatchExample - finfish</span><br><span class="line"><span class="number">19</span>:<span class="number">27</span>:<span class="number">59.039</span> [pool-<span class="number">1</span>-thread-<span class="number">62</span>] INFO com.imooc.concurrency.aqs.CountDownLatchExample - count count count,<span class="number">61</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  主线程不再等待创建的线程执行 直接执行了下面的输出语句</span><br><span class="line">  同时创建的线程也在执行</span><br></pre></td></tr></table></figure><h3 id="CountDownLatch的用法"><a href="#CountDownLatch的用法" class="headerlink" title="CountDownLatch的用法"></a>CountDownLatch的用法</h3><p>CountDownLatch典型用法1：某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为n new CountDownLatch(n) ，每当一个任务线程执行完毕，就将计数器减1 countdownlatch.countDown()，当计数器的值变为0时，在CountDownLatch上 await() 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</p><p>CountDownLatch典型用法2：实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，将其计数器初始化为1，多个线程在开始执行任务前首先 coundownlatch.await()，当主线程调用 countDown() 时，计数器变为0，多个线程同时被唤醒。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>无</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CountDownLatch&quot;&gt;&lt;a href=&quot;#CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch&quot;&gt;&lt;/a&gt;CountDownLatch&lt;/h3&gt;&lt;p&gt;简单他是一个计数器，线程安全的计数器&lt;/p&gt;</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AQS的基础概念</title>
    <link href="http://example.com/2022/05/11/AQS%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/05/11/AQS%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2022-05-11T10:23:01.000Z</published>
    <updated>2022-05-11T10:53:15.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网上aqs相关的文章很多很详细 也很好理解，摘录到文章里，着重记录好理解的概念。</p><ol><li><p><a href="https://zhuanlan.zhihu.com/p/378219920%EF%BC%88AQS%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%BE%88%E5%A4%9A%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8">https://zhuanlan.zhihu.com/p/378219920（AQS从原理到很多具体使用</a> 很多常用类都有单独的解析 写的很不错）</p></li><li><p><a href="https://blog.csdn.net/wwwzhouzy/article/details/119702170">https://blog.csdn.net/wwwzhouzy/article/details/119702170</a></p><p>​</p><p>​</p></li></ol><h2 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h2><p>AQS 的全称为（AbstractQueuedSynchronizer）</p><p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器， 比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p><h3 id="AQS-原理概览"><a href="#AQS-原理概览" class="headerlink" title="AQS 原理概览"></a>AQS 原理概览</h3><p><strong>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒 时锁分配的机制，这个机制 AQS 是用</strong> <strong>CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</strong></p><p>简单总结一下自己的理解，多个线程访问共享数据，通过获取锁的方式，获取到锁的那个线程执行对共享数据的操作，未获取到锁的线程进入到队列中阻塞，等待唤醒。</p><h3 id="AQS定义的两种资源共享方式"><a href="#AQS定义的两种资源共享方式" class="headerlink" title="AQS定义的两种资源共享方式"></a>AQS定义的两种资源共享方式</h3><ol><li><p><strong>Exclusive</strong>（独占）</p><p>字面意思  通过锁的方式 同一时间只有一个线程能执行对共享数据的操作。</p><p>这里涉及到公平锁非公平锁</p><ul><li>公平锁 先到先得  先来的线程 先操作 后续线程一次等待</li><li>非公平锁 线程要获取锁时 先通过cas抢锁，如果没抢到加入队列中等待下一次抢锁。</li></ul></li><li><p><strong>Share</strong>（共享）</p></li></ol><p>​       同样的字面意思，多个线程同时执行，这个之后会详细的根据具体的类学习</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AQS代码很少 ，需要理解的理论知识很多，也是多线程开发中很重要的一环需要多花点时间理解及翻阅资料。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;网上aqs相关的文章很多很详细 也很好理解，摘录到文章里，着重记录好理解的概念。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的并发容器的实现和简单理解</title>
    <link href="http://example.com/2022/05/10/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/05/10/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</id>
    <published>2022-05-10T11:40:58.000Z</published>
    <updated>2022-05-10T12:05:21.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList–-gt-CopyOnWriteArrayList"><a href="#ArrayList–-gt-CopyOnWriteArrayList" class="headerlink" title="ArrayList–&gt;CopyOnWriteArrayList"></a>ArrayList–&gt;CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList 对一些写操作的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">    Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">    newElements[len] = e;</span><br><span class="line">    setArray(newElements);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 会复制一份list的复本，然后在复制的list上进行写操作，最后在把旧的list指向copy的副本。</p><p>同时这些方法是被加锁的。</p><p>读写分离的操作保证了线程的安全性</p><p><strong>缺点</strong>：</p><ol><li><strong>内存占用问题</strong> 每次写操作的时候 都会复制一个新的list，这样内存中会有两个对象，如果原list很大占用内存很大，内存的占用直接翻倍，很容易出现YONG GC和Full Gc的情况</li><li><strong>数据实时性问题</strong> CopyOnWriteArrayList 只能保证最终的数据一致性，读的时候读的还是add前的就对象，不能保证数据实时性。</li></ol><h3 id="HashSet–-gt-gt-CopyOnWriteArraySet-TreeMap–-gt-gt-ConcurrentSkipListSet"><a href="#HashSet–-gt-gt-CopyOnWriteArraySet-TreeMap–-gt-gt-ConcurrentSkipListSet" class="headerlink" title="HashSet–&gt;&gt;CopyOnWriteArraySet  TreeMap–&gt;&gt;ConcurrentSkipListSet"></a>HashSet–&gt;&gt;CopyOnWriteArraySet  TreeMap–&gt;&gt;ConcurrentSkipListSet</h3><p>CopyOnWriteArraySet和CopyOnWriteArrayList实现的方式差不多不再多说</p><p>ConcurrentSkipListSet和ConcurrentSkipListMap有着千丝万缕的关系 之后会详细学这个类 之后再补充</p><h3 id="HashMap–-gt-gt-ConcurrentHashMap-Tree–-gt-gt-ConCurrentSkipListMap"><a href="#HashMap–-gt-gt-ConcurrentHashMap-Tree–-gt-gt-ConCurrentSkipListMap" class="headerlink" title="HashMap–&gt;&gt;ConcurrentHashMap  Tree–&gt;&gt; ConCurrentSkipListMap"></a>HashMap–&gt;&gt;ConcurrentHashMap  Tree–&gt;&gt; ConCurrentSkipListMap</h3><p>明天的学习会重点学习这两个类 </p><p>这两个类的性能和功能都是非常强大的，实际开发使用也很多。</p><p>之后补充。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天的21分钟的网课，我翻阅资料了解相关，理解一些理论知识和打通思路用了一个多少小时。能记录的点不多，但是对之后的学习帮助很大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ArrayList–-gt-CopyOnWriteArrayList&quot;&gt;&lt;a href=&quot;#ArrayList–-gt-CopyOnWriteArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList–&amp;gt;CopyOnWrit</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>同步容器</title>
    <link href="http://example.com/2022/05/09/%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2022/05/09/%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/</id>
    <published>2022-05-09T10:20:00.000Z</published>
    <updated>2022-05-09T10:39:24.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h2><ol><li>普通同步容器 Vector 和Stack 及 HashTable</li><li>Collections.Synchronized***</li></ol><p>Vector 和HashTable 这些类 就是 Arraylist 和HashMap 这些类的线程较安全版本 并不是完全安全的。</p><p>通过对 add put 这些方法加synchronized的锁来保证一定程度的线程安全性</p><p>但是当多个线程对同一个同步容器 进行增删操作的时候  同步容器的线程就不安全了（ConcurrentModificationException）会出现这种异常。</p><p>当一个线程对一个同步容器执行遍历操作，另一个线程修改了同步容器的集合长度这时候线程就不再安全了。</p><p>有了这些缺点就有了并发容器juc（明天开学）</p><h2 id="并发容器的优缺点"><a href="#并发容器的优缺点" class="headerlink" title="并发容器的优缺点"></a>并发容器的优缺点</h2><p>优点：不进行复合操作的时候 同步容器操作简单 使用方便  线程安全</p><p>缺点：1.  复合操作时线程不安全</p><pre><code> 2.  使用了synchronized效率低    3. 快速失败机制    ​</code></pre><h3 id="list遍历操作的小知识点"><a href="#list遍历操作的小知识点" class="headerlink" title="list遍历操作的小知识点"></a>list遍历操作的小知识点</h3><p>在使用 各种list的时候</p><p>foreach 和迭代器遍历的时候，如果进行remove操作会直接报错</p><p>在for循环中则不会</p><p>前两种建议先标识出来循环结束后再做处理    </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>同步容器的作用微乎其微 ，实际开发中应该也很少使用，效率问题的同时线程并不是完全安全的。不用也罢！ 作为知识储备看看理论得了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同步容器&quot;&gt;&lt;a href=&quot;#同步容器&quot; class=&quot;headerlink&quot; title=&quot;同步容器&quot;&gt;&lt;/a&gt;同步容器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;普通同步容器 Vector 和Stack 及 HashTable&lt;/li&gt;
&lt;li&gt;Collections.Sy</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>常见线程不安全类和写法</title>
    <link href="http://example.com/2022/05/08/%E5%B8%B8%E8%A7%81%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%B1%BB%E5%92%8C%E5%86%99%E6%B3%95/"/>
    <id>http://example.com/2022/05/08/%E5%B8%B8%E8%A7%81%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%B1%BB%E5%92%8C%E5%86%99%E6%B3%95/</id>
    <published>2022-05-08T02:14:43.000Z</published>
    <updated>2022-05-08T02:53:18.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时开发中 在写方法的时候 大多是都是在一个方法中 new 出一个类的新的对象</p><p>其实这种写法叫做堆栈封闭    保证了线程的安全性</p><h2 id="字符串拼接-StringBuilder和StringBuffer"><a href="#字符串拼接-StringBuilder和StringBuffer" class="headerlink" title="字符串拼接 StringBuilder和StringBuffer"></a>字符串拼接 StringBuilder和StringBuffer</h2><p>首先 </p><p>StringBuilder 是线程不安全的</p><p>StringBuffer 是线程安全的</p><p>主要看他们append的方法实现就很好理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer 的append</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        toStringCache = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">super</span>.append(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">StringBuilder 的append 实现  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.append(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>StringBuffer 通过在append 方法上 加synchronized锁的方式 保证了线程的安全性</p><p>相应的牺牲了效率  不考虑线程安全性的情况下 尽量使用builder</p><h2 id="时间相关SimpleDateFormat和joda-time"><a href="#时间相关SimpleDateFormat和joda-time" class="headerlink" title="时间相关SimpleDateFormat和joda-time"></a>时间相关SimpleDateFormat和joda-time</h2><p>直接看多线程下SimpleDateFormat类运行的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> clientTotal=<span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> ThteadTotal=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">final</span>  <span class="keyword">static</span> SimpleDateFormat sim=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore=<span class="keyword">new</span> <span class="title class_">Semaphore</span>(ThteadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch=<span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=clientTotal;i++)&#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    <span class="comment">//争抢方法</span></span><br><span class="line">                    update();</span><br><span class="line">                    <span class="comment">//释放</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sim.parse(<span class="string">&quot;20220508&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;12312312123&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">&quot;&quot;</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2082</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1867</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.imooc.concurrency.example.NotThreadSafeExampleClass.TimeExample.update(TimeExample.java:<span class="number">49</span>)</span><br><span class="line">at com.imooc.concurrency.example.NotThreadSafeExampleClass.TimeExample.lambda$main$<span class="number">0</span>(TimeExample.java:<span class="number">33</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">&quot;&quot;</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2082</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1867</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.imooc.concurrency.example.NotThreadSafeExampleClass.TimeExample.update(TimeExample.java:<span class="number">49</span>)</span><br><span class="line">at com.imooc.concurrency.example.NotThreadSafeExampleClass.TimeExample.lambda$main$<span class="number">0</span>(TimeExample.java:<span class="number">33</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>多线程的情况下 调用SimpleDateFormat的parse方法会疯狂报错</p><p>证明了他的线程不安全性  换一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">//在这里新建</span></span><br><span class="line"> SimpleDateFormat sim=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sim.parse(<span class="string">&quot;20220508&quot;</span>);</span><br><span class="line">           log.info(<span class="string">&quot;12312312123&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这种是我们常用写法 高大上一点就叫堆栈封闭</p><p>joda-time是线程安全的类 并且处理时间格式的效率是比SimpleDateFormat快的</p><p>java8之后还提供了一些时间类DateTimeFormatter  等</p><p>之后平时多用用这些类</p><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><p>这里先简单记录一下 </p><p>arraylist hashset  hashmap 这三个类都是线程不安全的类</p><p>并且有多个对应线程安全的类</p><p>以后会单独写一篇</p><h2 id="线程不安全的写法"><a href="#线程不安全的写法" class="headerlink" title="线程不安全的写法"></a>线程不安全的写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(xxx)&#123;xxx&#125;</span><br></pre></td></tr></table></figure><p>先判断在执行这种操作</p><p>if中的对象只要是会被其他线程共享的对象 就会出现线程不安全的问题</p><p>开发中先判断if中的要被判断的参数或对象会不会被其他线程影响</p><p>然后考虑加锁 才能保证线程的安全性。</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>无</p><p>愉快的周末开始了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;平时开发中 在写方法的时候 大多是都是在一个方法中 new 出一个类的新的对象&lt;/p&gt;
&lt;p&gt;其实这种写法叫做堆栈封闭    保证了线程的安</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal和线程封闭</title>
    <link href="http://example.com/2022/05/07/ThreadLocal%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD/"/>
    <id>http://example.com/2022/05/07/ThreadLocal%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD/</id>
    <published>2022-05-07T09:48:34.000Z</published>
    <updated>2022-05-07T10:16:26.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h2><p>当访问共享变量时，往往需要加锁来保证数据同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程中访问数据，就不需要同步了。这种技术称为线程封闭。在Java语言中，提供了一些类库和机制来维护线程的封闭性，例如局部变量和ThreadLocal类</p><ol><li>Ad-hoc 线程封闭程序控制实现，比较脆弱，尽量少用</li><li>堆栈封闭：局部变量，无并发问题，在项目中使用最多，简单说就是局部变量，方法的变量都拷贝到线程的堆栈中，只有这个线程能访问到。尽量少使用全局变量（变量不是常量）（平时写接口大部分都是这种方式，都是局部变量）</li><li>ThreadLocal线程封闭：比较好的封闭方法</li></ol><h2 id="ThreadLocal（线程变量）类"><a href="#ThreadLocal（线程变量）类" class="headerlink" title="ThreadLocal（线程变量）类"></a>ThreadLocal（线程变量）类</h2><p>threadLocal 类简单理解就是，threadLocal中存入的变量只有当前线程可以存取，对于其他线程来说是隔离的，ThreadLocal为每个变量都创建了一个副本，每个变量访问自己变量的副本。</p><h3 id="ThreadLocal的简单使用"><a href="#ThreadLocal的简单使用" class="headerlink" title="ThreadLocal的简单使用"></a>ThreadLocal的简单使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span>  <span class="keyword">static</span>  ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Long  <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span>   threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">使用很简单主要看关键方法的实现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get实现</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">set实现</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到每次getset都是会先获取当前线程</p><p>存储关键的ThreadLocalMap 也都是对当前线程进行的存取操作</p><p>保证了存储的数据对于每个线程的独立性</p><h3 id="ThreadLocal使用场景"><a href="#ThreadLocal使用场景" class="headerlink" title="ThreadLocal使用场景"></a>ThreadLocal使用场景</h3><ol><li><p>每个线程需要有自己单独的实例</p></li><li><p>有个实例需要在多个方法中使用并且不想被多线程所共享</p><p>​</p></li></ol><p>举个栗子：</p><p>登录的用户信息</p><p>经常会被很多方法中取用</p><p>需要进行很多次参数传递 从controller 到service中再到各个方法</p><p>如果用threadLocal 可以在任何地方调用get方法取得</p><p>还能保证不出现线程不安全的情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天就没什么总结 </p><p>看了一节课没看懂 又看了好多帖子 才有个一知半解；</p><p>threadLocal经常配合filter和interceptor使用</p><p>学习的时候我发现很久没写这个两个东西 把这两个东西的使用也顺便复习了</p><p>今天收获颇丰</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线程封闭&quot;&gt;&lt;a href=&quot;#线程封闭&quot; class=&quot;headerlink&quot; title=&quot;线程封闭&quot;&gt;&lt;/a&gt;线程封闭&lt;/h2&gt;&lt;p&gt;当访问共享变量时，往往需要加锁来保证数据同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程中访问数据，就不需要同步了</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>不可变对象</title>
    <link href="http://example.com/2022/05/06/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2022/05/06/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-05-06T10:25:55.000Z</published>
    <updated>2022-05-06T10:27:39.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h1><h3 id="不可变对象需要满足的条件"><a href="#不可变对象需要满足的条件" class="headerlink" title="不可变对象需要满足的条件"></a>不可变对象需要满足的条件</h3><ol><li>对象创建后状态不能修改</li><li>对象所有域都是final类型</li><li>对象是正确创建的（对象创建期间，this引用没有逸出）（完全没理解这是啥意思）</li></ol><h3 id="关键字final"><a href="#关键字final" class="headerlink" title="关键字final"></a>关键字final</h3><ol><li><p>final 修饰类  类不能被继承</p></li><li><p>final 修饰方法 1.锁定的方法不能被继承类重写修改 2. 效率（早期会提升效率最近版本已经没用了）</p></li><li><p>final 修饰变量 基本数据的变量修饰后不能被修改 ， 引用类被修饰后不能指向新的对象</p><p>主要注意修饰引用类的时候 是可以修改类中变量的数值 </p><p>例修饰map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以进行的操作</span></span><br><span class="line">map.put(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  <span class="comment">//不可以进行的操作</span></span><br><span class="line">  map=Maps.newHashMap();</span><br></pre></td></tr></table></figure><h3 id="不使用final定义不可变对象"><a href="#不使用final定义不可变对象" class="headerlink" title="不使用final定义不可变对象"></a>不使用final定义不可变对象</h3><h4 id="1-Collections-unmodifiable"><a href="#1-Collections-unmodifiable" class="headerlink" title="1. Collections.unmodifiable***"></a>1. Collections.unmodifiable***</h4><p>例map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private   final  static  Integer aaa=0;</span></span><br><span class="line"><span class="comment">//    private  final  static  String  q=&quot;&quot;;</span></span><br><span class="line">    <span class="keyword">private</span>    <span class="keyword">static</span> Map&lt;Integer,Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        q=&quot;&quot;;</span></span><br><span class="line"><span class="comment">//        aaa=1;</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; integerIntegerMap = Collections.unmodifiableMap(map);</span><br><span class="line">        integerIntegerMap.put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">at java.util.Collections$UnmodifiableMap.put(Collections.java:<span class="number">1459</span>)</span><br><span class="line">at com.imooc.concurrency.example.immutable.FinalExample.main(FinalExample.java:<span class="number">18</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> 翻看unmodifiableMap源码看到他的put方法的实现</span><br><span class="line">         <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不光是put 所有能修改的map中值的方法都被直接抛出异常</p><h4 id="2-google-guava-包提供的immutable"><a href="#2-google-guava-包提供的immutable" class="headerlink" title="2. google guava 包提供的immutable***"></a>2. google guava 包提供的immutable***</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> ImmutableList list= ImmutableList.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        list.add(<span class="number">123</span>);<span class="comment">//这里的add方法会有横线表示为不推荐使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">at com.google.common.collect.ImmutableCollection.add(ImmutableCollection.java:<span class="number">220</span>)</span><br><span class="line">at com.imooc.concurrency.example.immutable.FinalExample.main(FinalExample.java:<span class="number">24</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  add方法的实现</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@CanIgnoreReturnValue</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两种方法的对于put add这些方法的实现 很相似 都是直接抛出异常</p><p>​</p><p>​</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>多线程开发中如果对象条件允许设置为不可变对象，尽量把对象设置为不可变对象，避免出现线程安全问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;不可变对象&quot;&gt;&lt;a href=&quot;#不可变对象&quot; class=&quot;headerlink&quot; title=&quot;不可变对象&quot;&gt;&lt;/a&gt;不可变对象&lt;/h1&gt;&lt;h3 id=&quot;不可变对象需要满足的条件&quot;&gt;&lt;a href=&quot;#不可变对象需要满足的条件&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式和线程安全的关系</title>
    <link href="http://example.com/2022/03/01/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://example.com/2022/03/01/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2022-03-01T07:29:45.000Z</published>
    <updated>2022-03-01T08:39:02.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="懒汉式和饿汉式"><a href="#懒汉式和饿汉式" class="headerlink" title="懒汉式和饿汉式"></a>懒汉式和饿汉式</h2><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonExample1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> SingletonExample1  ins=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonExample1 <span class="title function_">getIns</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ins==<span class="literal">null</span>)&#123;</span><br><span class="line">             ins = <span class="keyword">new</span> <span class="title class_">SingletonExample1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点 在需要时调用才开始创建对象 性能比饿汉式优秀</p><p>缺点 线程不安全</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonExample2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  SingletonExample2 ins=<span class="keyword">new</span> <span class="title class_">SingletonExample2</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SingletonExample2 <span class="title function_">getIns</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ins;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonExample3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample3 ins=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ins=<span class="keyword">new</span> <span class="title class_">SingletonExample3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonExample3 <span class="title function_">getIns</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ins;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点 线程安全</p><p>缺点 类加载就会创建对象，如果后续代码没有使用造成性能浪费，如果构造方法中需要处理的代码很多 会有性能问题</p><h3 id="如何使懒汉式性能安全"><a href="#如何使懒汉式性能安全" class="headerlink" title="如何使懒汉式性能安全"></a>如何使懒汉式性能安全</h3><h4 id="synchronized修饰方法"><a href="#synchronized修饰方法" class="headerlink" title="synchronized修饰方法"></a>synchronized修饰方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonExample4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  SingletonExample4 ins=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//性能问题 不推荐写法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonExample4 <span class="title function_">getIns</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ins==<span class="literal">null</span>)&#123;</span><br><span class="line">             ins = <span class="keyword">new</span> <span class="title class_">SingletonExample4</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用synchronized修饰 类的获取方法 保证了线程安全 但是降低了性能</p><h4 id="双重同步锁"><a href="#双重同步锁" class="headerlink" title="双重同步锁"></a>双重同步锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重同步锁单例模式  懒汉模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonExample5</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//private static SingletonExample5 ins=null;</span></span><br><span class="line">  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonExample5 ins=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  SingletonExample5 <span class="title function_">getIns</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ins==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample5.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (ins==<span class="literal">null</span>)&#123;</span><br><span class="line">                    ins = <span class="keyword">new</span> <span class="title class_">SingletonExample5</span>();</span><br><span class="line">                    <span class="comment">//线程不安全的，主要原因是cpu和jvm会对指令重排，多线程的情况下有可能获得未被初始化的对象</span></span><br><span class="line">                    <span class="comment">//解决办法就是静止指令重排  volatile</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不使用 volatile修饰的情况下 双重同步锁单例模式也是线程不安全的，指令重排会使别的线程获取到未被初始化的对象。volatile禁止指令重排，这种写法比直接用synchronized修饰方法性能高并且保证了线程的安全性</p><h3 id="枚举单例模式（推荐写法）"><a href="#枚举单例模式（推荐写法）" class="headerlink" title="枚举单例模式（推荐写法）"></a>枚举单例模式（<strong>推荐写法</strong>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式 最安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@Recommend</span></span><br><span class="line"><span class="comment">//枚举单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonExample7</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>  <span class="title function_">SingletonExample7</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> SingletonExample7 <span class="title function_">getInstance</span> <span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span>  SingletonExample7Enum.instance.getIntance();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>  <span class="keyword">enum</span>  <span class="title class_">SingletonExample7Enum</span>&#123;</span><br><span class="line">     instance;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  SingletonExample7 singletonExample7;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//jvm保证绝对只执行一次</span></span><br><span class="line">     SingletonExample7Enum()&#123;</span><br><span class="line">         singletonExample7=<span class="keyword">new</span> <span class="title class_">SingletonExample7</span>();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> SingletonExample7 <span class="title function_">getIntance</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span>  singletonExample7;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举实现单例</p><p>使用的时候才会创建对象不会有饿汉式的性能浪费等问题，而且保证了性能安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;懒汉式和饿汉式&quot;&gt;&lt;a href=&quot;#懒汉式和饿汉式&quot; class=&quot;headerlink&quot; title=&quot;懒汉式和饿汉式&quot;&gt;&lt;/a&gt;懒汉式和饿汉式&lt;/h2&gt;&lt;h3 id=&quot;懒汉式&quot;&gt;&lt;a href=&quot;#懒汉式&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>synchronizd</title>
    <link href="http://example.com/2022/02/19/synchronizd/"/>
    <id>http://example.com/2022/02/19/synchronizd/</id>
    <published>2022-02-19T02:30:53.000Z</published>
    <updated>2022-02-19T03:08:33.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Synchronizd"><a href="#Synchronizd" class="headerlink" title="Synchronizd"></a>Synchronizd</h1><h3 id="synchronizd的四种用法和作用范围"><a href="#synchronizd的四种用法和作用范围" class="headerlink" title="synchronizd的四种用法和作用范围"></a>synchronizd的四种用法和作用范围</h3><ol><li>修饰代码块，大括号括起来的代码，作用于调用的那个对象</li><li>修饰方法，整个方法，作用于调用的对象</li><li>修饰静态方法，整个静态方法，作用于所有对象</li><li>修饰类 括号括起来的部分，作用于所有对象</li></ol><h3 id="演示，作用于方法和代码块"><a href="#演示，作用于方法和代码块" class="headerlink" title="演示，作用于方法和代码块"></a>演示，作用于方法和代码块</h3><h4 id="修饰代码块-和修饰方法"><a href="#修饰代码块-和修饰方法" class="headerlink" title="修饰代码块 和修饰方法"></a>修饰代码块 和修饰方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//synchronized 修饰一个代码块</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;test1 - &#123;&#125; - &#123;&#125;&quot;</span>,name,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized 修饰一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;test2 - &#123;&#125; - &#123;&#125;&quot;</span>,name,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//test1的测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample1</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample1</span>();</span><br><span class="line">        <span class="type">SynchronizedExample1</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample1</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test1(<span class="string">&quot;example1&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test1(<span class="string">&quot;example2&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//test2 的测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample1</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample1</span>();</span><br><span class="line">        <span class="type">SynchronizedExample1</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample1</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test2(<span class="string">&quot;example1&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example2.test2(<span class="string">&quot;example2&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="test1的结果（同一对象不同线程调用）"><a href="#test1的结果（同一对象不同线程调用）" class="headerlink" title="test1的结果（同一对象不同线程调用）"></a>test1的结果（同一对象不同线程调用）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.720</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">0</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">2</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">3</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">4</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">5</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">6</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">7</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">8</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">9</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">0</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">2</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">3</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">4</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">5</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">6</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">7</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">8</span></span><br><span class="line"><span class="number">10</span>:<span class="number">58</span>:<span class="number">16.723</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到ex2 需要等ex1执行结束之后才开始执行 说明synchroized生效了</p><h4 id="test2运行结果（不同线程不同对象）"><a href="#test2运行结果（不同线程不同对象）" class="headerlink" title="test2运行结果（不同线程不同对象）"></a>test2运行结果（不同线程不同对象）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.114</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.114</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example2 - <span class="number">9</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">01</span>:<span class="number">31.117</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample1 - test1 - example1 - <span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ex1 和 ex2 交替运行 说明 修饰方法和代码块时   只对调用方法和代码块的那个对象有效</p><h3 id="修饰静态方法和类"><a href="#修饰静态方法和类" class="headerlink" title="修饰静态方法和类"></a>修饰静态方法和类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//synchronized 修饰一个类</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample2.class)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;test1 - &#123;&#125; - &#123;&#125;&quot;</span>,name,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized 修饰一个静态方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span>    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(String name)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">         log.info(<span class="string">&quot;test2 - &#123;&#125; - &#123;&#125;&quot;</span>,name,i);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample2</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">SynchronizedExample2</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample2</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test1(<span class="string">&quot;example1&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test1(<span class="string">&quot;example2&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample2</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">SynchronizedExample2</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample2</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example1.test1(<span class="string">&quot;example1&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            example2.test1(<span class="string">&quot;example2&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="test1结果（同对象不同线程）"><a href="#test1结果（同对象不同线程）" class="headerlink" title="test1结果（同对象不同线程）"></a>test1结果（同对象不同线程）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.398</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">9</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">05</span>:<span class="number">44.401</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example2 - <span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生效 没什么可说的</p><h4 id="test2（不同对象不同线程）"><a href="#test2（不同对象不同线程）" class="headerlink" title="test2（不同对象不同线程）"></a>test2（不同对象不同线程）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.939</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test1 - example1 - <span class="number">9</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">0</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">2</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">3</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">4</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">5</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">6</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">7</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">8</span></span><br><span class="line"><span class="number">11</span>:<span class="number">06</span>:<span class="number">51.943</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.imooc.concurrency.example.sycn.SynchronizedExample2 - test2 - example2 - <span class="number">9</span></span><br></pre></td></tr></table></figure><p>可以看到修饰类和方法的时候 不同的对象和不同的线程</p><p>ex1 和ex2 依旧保持顺序执行</p><p>ex1执行完后ex2开始执行，由此可得 在synchronized修饰类和静态方法时 对这个类的所有对象都生效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Synchronizd&quot;&gt;&lt;a href=&quot;#Synchronizd&quot; class=&quot;headerlink&quot; title=&quot;Synchronizd&quot;&gt;&lt;/a&gt;Synchronizd&lt;/h1&gt;&lt;h3 id=&quot;synchronizd的四种用法和作用范围&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>CAS(ConmpareAndSwap)</title>
    <link href="http://example.com/2022/02/18/CAS-ConmpareAndSwap/"/>
    <id>http://example.com/2022/02/18/CAS-ConmpareAndSwap/</id>
    <published>2022-02-18T06:59:30.000Z</published>
    <updated>2022-02-18T07:25:28.001Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介（网络摘录）"><a href="#简介（网络摘录）" class="headerlink" title="简介（网络摘录）"></a>简介（网络摘录）</h5><p>​    在计算机科学中，比较和交换（Conmpare And Swap）是用于实现多线程同步的原子指令。它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。操作结果必须说明是否进行替换; 这可以通过一个简单的布尔响应（这个变体通常称为比较和设置），或通过返回从内存位置读取的值来完成。</p><p>​    CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该 位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前 值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”</p><p>​    通常将 CAS 用于同步的方式是从地址 V 读取值 A，执行多步计算来获得新 值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。</p><p>​    类似于 CAS 的指令允许算法执行读-修改-写操作，而无需害怕其他线程同时 修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法 可以对该操作重新计算。</p><h4 id="CAS的问题"><a href="#CAS的问题" class="headerlink" title="CAS的问题"></a>CAS的问题</h4><ol><li><strong>ABA问题</strong>。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</li></ol><p><strong>从Java1</strong>.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><p>关于ABA问题参考文档: <a href="http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p><p><strong>2. 循环时间长开销大</strong>。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p><p><strong>3. 只能保证一个共享变量的原子操作</strong>。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j&#x3D;a，合并一下ij&#x3D;2a，然后用CAS来操作ij。从Java1.5开始JDK提供了<strong>AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</strong></p><h3 id="Java中CAS的实现（学习总结）"><a href="#Java中CAS的实现（学习总结）" class="headerlink" title="Java中CAS的实现（学习总结）"></a>Java中CAS的实现（学习总结）</h3><h4 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h4><p>说到java中的cas不得不提atomic</p><p>以atomic中的AtomicInteger中的incrementAndGet方法为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"> &#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> var5;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要看unsafe的getAndAddInt方法的实现</p><p>var1 为当前atomicInteger    var2为当前值    var5为底层值  var4为更新量</p><p>可以看到循环 会不停的从底层取出最新的var5和var2对比 当</p><p>var5&#x3D;var2时 才会执行更新操作var5+var4</p><p>保证了原子性</p><h4 id="如何解决cas的aba问题"><a href="#如何解决cas的aba问题" class="headerlink" title="如何解决cas的aba问题"></a>如何解决cas的aba问题</h4><p>atomic中AtomicStampedReference 解决了这个问题</p><p>为每一步修改操作加上版本号，比如原数据为0 版本号为0</p><p>一个线程修改原数据为1 后 版本号也为1 再把原数据修改成0 版本号却变成了2</p><p>另一个线程通过cas对比后虽然数据还是0但是版本号已经改变了</p><p>这样就避免了aba问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;简介（网络摘录）&quot;&gt;&lt;a href=&quot;#简介（网络摘录）&quot; class=&quot;headerlink&quot; title=&quot;简介（网络摘录）&quot;&gt;&lt;/a&gt;简介（网络摘录）&lt;/h5&gt;&lt;p&gt;​    在计算机科学中，比较和交换（Conmpare And Swap）是用于实现多线程同</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://example.com/2022/02/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/02/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-02-16T09:10:39.000Z</published>
    <updated>2022-02-16T09:12:37.960Z</updated>
    
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>新博客的第一篇文章</title>
    <link href="http://example.com/2022/02/16/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/02/16/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2022-02-16T09:03:32.000Z</published>
    <updated>2022-02-16T09:07:03.507Z</updated>
    
    <content type="html"><![CDATA[<p>​      很久没写作了，工作中很多有用的没有积累下来，之前的博客由于服务器的到期数据没留下来</p><p>新开一个博客放在自己的电脑上重新维护，2022年新的开始，加油。</p><p>   希望每次我偷懒的时候看到这篇文章都可以想到写这篇文章时候下的决心。  </p><p>​                                                                2022.02.16</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​      很久没写作了，工作中很多有用的没有积累下来，之前的博客由于服务器的到期数据没留下来&lt;/p&gt;
&lt;p&gt;新开一个博客放在自己的电脑上重新维护，2022年新的开始，加油。&lt;/p&gt;
&lt;p&gt;   希望每次我偷懒的时候看到这篇文章都可以想到写这篇文章时候下的决心。  &lt;/p</summary>
      
    
    
    
    <category term="new" scheme="http://example.com/categories/new/"/>
    
    
    <category term="新的开始" scheme="http://example.com/tags/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>aaa</title>
    <link href="http://example.com/2022/02/16/aaa/"/>
    <id>http://example.com/2022/02/16/aaa/</id>
    <published>2022-02-16T07:32:35.000Z</published>
    <updated>2022-02-16T08:50:49.313Z</updated>
    
    
    
    
    <category term="suibianxiexie" scheme="http://example.com/categories/suibianxiexie/"/>
    
    
    <category term="第一篇文章" scheme="http://example.com/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/16/hello-world/"/>
    <id>http://example.com/2022/02/16/hello-world/</id>
    <published>2022-02-16T06:53:03.240Z</published>
    <updated>2022-02-16T06:53:03.240Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
