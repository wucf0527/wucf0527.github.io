<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wcf</title>
  <icon>https://www.gravatar.com/avatar/b70bb76631c43c98ad1cb7bd1daf1b74</icon>
  <subtitle>无</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-18T07:25:28.001Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wucf</name>
    <email>wcfinyourheart@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAS(ConmpareAndSwap)</title>
    <link href="http://example.com/2022/02/18/CAS-ConmpareAndSwap/"/>
    <id>http://example.com/2022/02/18/CAS-ConmpareAndSwap/</id>
    <published>2022-02-18T06:59:30.000Z</published>
    <updated>2022-02-18T07:25:28.001Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介（网络摘录）"><a href="#简介（网络摘录）" class="headerlink" title="简介（网络摘录）"></a>简介（网络摘录）</h5><p>​    在计算机科学中，比较和交换（Conmpare And Swap）是用于实现多线程同步的原子指令。它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。操作结果必须说明是否进行替换; 这可以通过一个简单的布尔响应（这个变体通常称为比较和设置），或通过返回从内存位置读取的值来完成。</p><p>​    CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该 位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前 值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”</p><p>​    通常将 CAS 用于同步的方式是从地址 V 读取值 A，执行多步计算来获得新 值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。</p><p>​    类似于 CAS 的指令允许算法执行读-修改-写操作，而无需害怕其他线程同时 修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法 可以对该操作重新计算。</p><h4 id="CAS的问题"><a href="#CAS的问题" class="headerlink" title="CAS的问题"></a>CAS的问题</h4><ol><li><strong>ABA问题</strong>。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</li></ol><p><strong>从Java1</strong>.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><p>关于ABA问题参考文档: <a href="http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p><p><strong>2. 循环时间长开销大</strong>。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p><p><strong>3. 只能保证一个共享变量的原子操作</strong>。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j&#x3D;a，合并一下ij&#x3D;2a，然后用CAS来操作ij。从Java1.5开始JDK提供了<strong>AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</strong></p><h3 id="Java中CAS的实现（学习总结）"><a href="#Java中CAS的实现（学习总结）" class="headerlink" title="Java中CAS的实现（学习总结）"></a>Java中CAS的实现（学习总结）</h3><h4 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h4><p>说到java中的cas不得不提atomic</p><p>以atomic中的AtomicInteger中的incrementAndGet方法为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"> &#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> var5;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要看unsafe的getAndAddInt方法的实现</p><p>var1 为当前atomicInteger    var2为当前值    var5为底层值  var4为更新量</p><p>可以看到循环 会不停的从底层取出最新的var5和var2对比 当</p><p>var5&#x3D;var2时 才会执行更新操作var5+var4</p><p>保证了原子性</p><h4 id="如何解决cas的aba问题"><a href="#如何解决cas的aba问题" class="headerlink" title="如何解决cas的aba问题"></a>如何解决cas的aba问题</h4><p>atomic中AtomicStampedReference 解决了这个问题</p><p>为每一步修改操作加上版本号，比如原数据为0 版本号为0</p><p>一个线程修改原数据为1 后 版本号也为1 再把原数据修改成0 版本号却变成了2</p><p>另一个线程通过cas对比后虽然数据还是0但是版本号已经改变了</p><p>这样就避免了aba问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;简介（网络摘录）&quot;&gt;&lt;a href=&quot;#简介（网络摘录）&quot; class=&quot;headerlink&quot; title=&quot;简介（网络摘录）&quot;&gt;&lt;/a&gt;简介（网络摘录）&lt;/h5&gt;&lt;p&gt;​    在计算机科学中，比较和交换（Conmpare And Swap）是用于实现多线程同</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://example.com/2022/02/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/02/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-02-16T09:10:39.000Z</published>
    <updated>2022-02-16T09:12:37.960Z</updated>
    
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="多线程" scheme="http://example.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>新博客的第一篇文章</title>
    <link href="http://example.com/2022/02/16/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/02/16/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2022-02-16T09:03:32.000Z</published>
    <updated>2022-02-16T09:07:03.507Z</updated>
    
    <content type="html"><![CDATA[<p>​      很久没写作了，工作中很多有用的没有积累下来，之前的博客由于服务器的到期数据没留下来</p><p>新开一个博客放在自己的电脑上重新维护，2022年新的开始，加油。</p><p>   希望每次我偷懒的时候看到这篇文章都可以想到写这篇文章时候下的决心。  </p><p>​                                                                2022.02.16</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​      很久没写作了，工作中很多有用的没有积累下来，之前的博客由于服务器的到期数据没留下来&lt;/p&gt;
&lt;p&gt;新开一个博客放在自己的电脑上重新维护，2022年新的开始，加油。&lt;/p&gt;
&lt;p&gt;   希望每次我偷懒的时候看到这篇文章都可以想到写这篇文章时候下的决心。  &lt;/p</summary>
      
    
    
    
    <category term="new" scheme="http://example.com/categories/new/"/>
    
    
    <category term="新的开始" scheme="http://example.com/tags/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>aaa</title>
    <link href="http://example.com/2022/02/16/aaa/"/>
    <id>http://example.com/2022/02/16/aaa/</id>
    <published>2022-02-16T07:32:35.000Z</published>
    <updated>2022-02-16T08:50:49.313Z</updated>
    
    
    
    
    <category term="suibianxiexie" scheme="http://example.com/categories/suibianxiexie/"/>
    
    
    <category term="第一篇文章" scheme="http://example.com/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/16/hello-world/"/>
    <id>http://example.com/2022/02/16/hello-world/</id>
    <published>2022-02-16T06:53:03.240Z</published>
    <updated>2022-02-16T06:53:03.240Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
